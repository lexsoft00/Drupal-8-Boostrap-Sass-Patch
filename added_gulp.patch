diff --git a/bootstrap.api.php b/bootstrap.api.php
index 6346320..308d7cd 100644
--- a/bootstrap.api.php
+++ b/bootstrap.api.php
@@ -1,63 +1,243 @@
 <?php
 /**
  * @file
- * List of available procedural hook and alter APIs for use in your sub-theme.
+ * Drupal Bootstrap Drush commands.
  */
+use Drupal\bootstrap\Bootstrap;
+use Drupal\bootstrap\Theme;
+use Drupal\Component\Serialization\Yaml;
 
 /**
- * @addtogroup plugins_alter
- *
- * @{
+ * Implements hook_drush_command().
  */
+function bootstrap_drush_command() {
+  $items = array();
+  $items['bootstrap-generate-docs'] = [
+    'description' => dt('Generates markdown documentation for the Drupal based code.'),
+    'arguments' => [
+      'type' => 'The specific type of documentation to generate, defaults to "all". Can be: "all", "settings".',
+    ],
+    'aliases' => ['bs-docs'],
+  ];
+  $items['bootstrap-sub-theme'] = array(
+    'description' => 'Create a Bootstrap foundation sub-theme',
+    'aliases' => array('bsass'),
+    'arguments' => array(
+      'name'         => 'Your sub-theme name.',
+      'machine_name' => 'A machine-readable name for your theme, optional only  [a-z, 0-9] ',
+    ),
+    'options' => array(
+      'description'  => 'Your sub-theme description.',
+      'machine-name' => '[a-z, 0-9] A machine-readable name for your theme.'
+    ),
+    'examples' => array(
+      'drush bsass "custom theme name"' => 'Create a sub-theme with the default options.',
+      'drush bsass "foo bar" "foo_bar"  --description="My supersweet awesome theme"' => 'Create a sub-theme with additional options.',
+    ),
+  );
+
+  return $items;
+}
 
 /**
- * Allows sub-themes to alter the array used for colorizing text.
+ * Generates markdown documentation.
  *
- * @param array $texts
- *   An associative array containing the text and classes to be matched, passed
- *   by reference.
+ * @param string $type
+ */
+function drush_bootstrap_generate_docs($type = 'all') {
+  $types = $type === 'all' ? ['settings'] : [$type];
+  foreach ($types as $type) {
+    $function = "_drush_bootstrap_generate_docs_$type";
+    if (function_exists($function)) {
+      $ret = $function(Bootstrap::getTheme('bootstrap'));
+      if ($ret) {
+        drush_log('Successfully generated documentation for: ' . $type, 'success');
+      }
+      else {
+        drush_log('Unable to generate documentation for: ' . $type, 'error');
+      }
+    }
+    else {
+      drush_log('Invalid documentation type: ' . $type, 'error');
+    }
+  }
+}
+
+/**
+ * Generates settings documentation.
  *
- * @see \Drupal\bootstrap\Bootstrap::cssClassFromString()
+ * @param \Drupal\bootstrap\Theme $bootstrap
+ *   The theme instance of the Drupal Bootstrap base theme.
  */
-function hook_bootstrap_colorize_text_alter(&$texts) {
-  // This matches the exact string: "My Unique Button Text".
-  $texts['matches'][t('My Unique Button Text')] = 'primary';
+function _drush_bootstrap_generate_docs_settings(Theme $bootstrap) {
+  $output[] = '<!-- @file Overview of theme settings for Drupal Bootstrap based themes. -->';
+  $output[] = '<!-- @defgroup -->';
+  $output[] = '<!-- @ingroup -->';
+  $output[] = '# Theme Settings';
+  $output[] = '';
+  $output[] = 'To override a setting, open `./config/install/THEMENAME.settings.yml` and add the following:';
+  $output[] = '';
+  $output[] = '```yaml';
+  $output[] = '# Settings';
+  $output[] = '';
+  $output[] = 'settings:';
+  $output[] = '  SETTING_NAME: SETTING_VALUE';
+  $output[] = '```';
+
+  // Determine the groups.
+  $groups = [];
+  foreach ($bootstrap->getSettingPlugin() as $setting) {
+    // Only get the first two groups (we don't need 3rd, or more, levels).
+    $_groups = array_slice($setting->getGroups(), 0, 2, FALSE);
+    if (!$_groups) {
+      continue;
+    }
+    $groups[implode(' > ', $_groups)][] = $setting->getPluginDefinition();
+  }
 
-  // This would also match the string above, however the class returned would
-  // also be the one above; "matches" takes precedence over "contains".
-  $texts['contains'][t('Unique')] = 'notice';
+  // Generate a table of each group's settings.
+  foreach ($groups as $group => $settings) {
+    $output[] = '';
+    $output[] = '---';
+    $output[] = '';
+    $output[] = "### $group";
+    $output[] = '';
+    $output[] = '<table class="table table-striped table-responsive">';
+    $output[] = '  <thead><tr><th class="col-xs-3">Setting name</th><th>Description and default value</th></tr></thead>';
+    $output[] = '  <tbody>';
+    foreach ($settings as $definition) {
+      $output[] = '  <tr>';
+      $output[] = '    <td class="col-xs-3">' . $definition['id'] . '</td>';
+      $output[] = '    <td>';
+      $output[] = '      <div class="help-block">' . str_replace('&quote;', '"', $definition['description']) . '</div>';
+      $output[] = '      <pre class=" language-yaml"><code>' . Yaml::encode([$definition['id'] => $definition['defaultValue']]) . '</code></pre>';
+      $output[] = '    </td>';
+      $output[] = '  </tr>';
+    }
+    $output[] = '  </tbody>';
+    $output[] = '</table>';
+  }
 
-  // Remove matching for strings that contain "apply":
-  unset($texts['contains'][t('Apply')]);
+  // Ensure we have link references at the bottom.
+  $output[] = '';
+  $output[] = '[Drupal Bootstrap]: https://www.drupal.org/project/bootstrap';
+  $output[] = '[Bootstrap Framework]: http://getbootstrap.com';
 
-  // Change the class that matches "Rebuild" (originally "warning"):
-  $texts['contains'][t('Rebuild')] = 'success';
+  // Save the generated output to the appropriate file.
+  return file_put_contents(realpath($bootstrap->getPath() . '/docs/Theme-Settings.md'), implode("\n", $output)) !== FALSE;
 }
 
 /**
- * Allows sub-themes to alter the array used for associating an icon with text.
- *
- * @param array $texts
- *   An associative array containing the text and icons to be matched, passed
- *   by reference.
- *
- * @see \Drupal\bootstrap\Bootstrap::glyphiconFromString()
+ * Create a Boostrap sub-theme.
  */
-function hook_bootstrap_iconize_text_alter(&$texts) {
-  // This matches the exact string: "My Unique Button Text".
-  $texts['matches'][t('My Unique Button Text')] = 'heart';
+function drush_bootstrap_sub_theme($name = NULL, $machine_name = NULL, $description = NULL) {
+  if (empty($name)) {
+    drush_set_error(dt("Please provide a name for the sub-theme.\nUSAGE:\tdrush bsass [name] [machine_name !OPTIONAL] [description !OPTIONAL]\n"));
+    return;
+  }
+  //Filter everything but letters, numbers, underscores, and hyphens
+  $machine_name = !empty($machine_name) ? preg_replace('/[^a-z0-9_-]+/', '', strtolower($machine_name)) : preg_replace('/[^a-z0-9_-]+/', '', strtolower($name));
+  // Eliminate hyphens
+  $machine_name = str_replace('-', '_', $machine_name);
+
+  $bootstrap_path = drush_get_context('DRUSH_DRUPAL_ROOT') . '/' . drupal_get_path('theme', 'bootstrap');
+  $getstudio_path = drush_get_context('DRUSH_DRUPAL_ROOT') . '/' . drupal_get_path('profile', 'getstudio');
+  $subtheme_path = explode('/', $bootstrap_path);
+  array_pop($subtheme_path);
+  $subtheme_path = implode('/', $subtheme_path) . '/' . $machine_name;
+  // Make a fresh copy of the subtheme.
+  $s = drush_copy_dir("$bootstrap_path/starterkits/sass", $subtheme_path);
+  if (empty($s)) {
+    return;
+  }
+
+  // Rename files and fill in the theme machine name
+  drush_op('rename', "$subtheme_path/THEMENAME.starterkit.yml", "$subtheme_path/$machine_name.info.yml");
+  drush_op('rename', "$subtheme_path/THEMENAME.libraries.yml", "$subtheme_path/$machine_name.libraries.yml");
+  drush_op('rename', "$subtheme_path/THEMENAME.theme", "$subtheme_path/$machine_name.theme");
+  drush_op('rename', "$subtheme_path/config/install/THEMENAME.settings.yml", "$subtheme_path/config/install/$machine_name.settings.yml");
+  drush_op('rename', "$subtheme_path/config/schema/THEMENAME.schema.yml", "$subtheme_path/config/schema/$machine_name.schema.yml");
 
-  // This would also match the string above, however the class returned would
-  // also be the one above; "matches" takes precedence over "contains".
-  $texts['contains'][t('Unique')] = 'bullhorn';
 
-  // Remove matching for strings that contain "filter":
-  unset($texts['contains'][t('Filter')]);
+  // Change the name of the theme.
+  drush_op('bootstrap_file_str_replace', "$subtheme_path/$machine_name.info.yml", 'THEMETITLE', "$name");
 
-  // Change the icon that matches "Upload" (originally "upload"):
-  $texts['contains'][t('Upload')] = 'ok';
+  // Change the name of the theme.
+  if (!empty($description)) {
+    drush_op('bootstrap_file_str_replace', "$subtheme_path/$machine_name.info.yml", 'Custom sub-theme, inherits from the Bootstrap base theme', $description);
+  }
+
+  // Replaces instances of THEMENAME in required files to name of the theme.
+  drush_op('bootstrap_file_str_replace', "$subtheme_path/$machine_name.info.yml", 'THEMENAME', "$machine_name");
+
+  // Replaces instances of THEMENAME in required files to name of the theme.
+  drush_op('bootstrap_file_str_replace', "$subtheme_path/config/install/$machine_name.settings.yml", 'THEMENAME.settings', "$machine_name" . "." . "settings");
+  drush_op('bootstrap_file_str_replace', "$subtheme_path/config/schema/$machine_name.schema.yml", 'THEMETITLE', "$name");
+
+  // Notify user of the newly created theme.
+  drush_print(dt("\n!name sub-theme was created in !path. \n",
+    array(
+      '!name' => $name,
+      '!path' => $subtheme_path,
+    )
+  ));
+
+  drush_pm_enable_validate($machine_name);
+  drush_pm_enable($machine_name);
+  $src = $getstudio_path . '/' . "gulp";
+  $dest = $subtheme_path;
+  bootstrap_drush_copy_dir($src, $dest, $overwrite = FILE_EXISTS_MERGE);
+  drush_print(dt("\n!name Bootstrap Sass sub-theme was successfully created! \n",
+    array(
+      '!name' => $name,
+    )
+  ));
 }
 
 /**
- * @} End of "addtogroup".
+ * Internal helper: Replace strings in a file.
  */
+function bootstrap_file_str_replace($file_path, $find, $replace) {
+  $file_contents = file_get_contents($file_path);
+  $file_contents = str_replace($find, $replace, $file_contents);
+  file_put_contents($file_path, $file_contents);
+}
+
+/**
+ * Implements hook_drush_help().
+ */
+function bootstrap_drush_help($section) {
+  switch ($section) {
+    case 'drush:bootstrap-sub-theme':
+      return dt("Create a Boostrap custom sub-theme.");
+  }
+}
+
+function bootstrap_drush_copy_dir($src, $dest, $overwrite = FILE_EXISTS_ABORT) {
+    if (file_exists($dest)) {
+    if ($overwrite === FILE_EXISTS_OVERWRITE) {
+      drush_op('drush_delete_dir', $dest, TRUE);
+    }
+    elseif ($overwrite === FILE_EXISTS_ABORT) {
+      return drush_set_error('DRUSH_DESTINATION_EXISTS', dt('Destination directory !dest already exists.', array('!dest' => $dest)));
+    }
+    elseif ($overwrite === FILE_EXISTS_MERGE) {
+      // $overwrite flag may indicate we should merge instead.
+      drush_log(dt('Merging existing !dest directory', array('!dest' => $dest)));
+    }
+  }
+  // $src readable?
+  if (!is_readable($src)) {
+    return drush_set_error('DRUSH_SOURCE_NOT_EXISTS', dt('Source directory !src is not readable or does not exist.', array('!src' => $src)));
+  }
+  // $dest writable?
+  if (!is_writable(dirname($dest))) {
+    return drush_set_error('DRUSH_DESTINATION_NOT_WRITABLE', dt('Destination directory !dest is not writable.', array('!dest' => dirname($dest))));
+  }
+  // Try to do a recursive copy.
+  if (@drush_op('_drush_recursive_copy', $src, $dest)) {
+    return TRUE;
+  }
+
+  return drush_set_error('DRUSH_COPY_DIR_FAILURE', dt('Unable to copy !src to !dest.', array('!src' => $src, '!dest' => $dest)));
+  }
\ No newline at end of file
